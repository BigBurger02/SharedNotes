@page "/weather"
@using Microsoft.EntityFrameworkCore
@using SharedNotes.Data
@using SharedNotes.Model
@attribute [StreamRendering]
@inject IDbContextFactory<NotesContext> DbFactory

<PageTitle>Weather</PageTitle>

<h1>Weather</h1>

<p>This component demonstrates showing data.</p>

@if (forecasts == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else
{
    <table class="table">
        <thead>
        <tr>
            <th>Date</th>
            <th>Temp. (C)</th>
            <th>Temp. (F)</th>
            <th>Summary</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var forecast in forecasts)
        {
            <tr>
                <td>@forecast.Date.ToShortDateString()</td>
                <td>@forecast.TemperatureC</td>
                <td>@forecast.TemperatureF</td>
                <td>@forecast.Summary</td>
            </tr>
        }
        </tbody>
    </table>
}

@code {
    private WeatherForecast[]? forecasts;

    protected override async Task OnInitializedAsync()
    {
    // Simulate asynchronous loading to demonstrate streaming rendering
        await Task.Delay(500);

        var startDate = DateOnly.FromDateTime(DateTime.Now);
        var summaries = new[] { "Freezing", "Bracing", "Chilly", "Cool", "Mild", "Warm", "Balmy", "Hot", "Sweltering", "Scorching" };
        forecasts = Enumerable.Range(1, 5).Select(index => new WeatherForecast
        {
            Date = startDate.AddDays(index),
            TemperatureC = Random.Shared.Next(-20, 55),
            Summary = summaries[Random.Shared.Next(summaries.Length)]
        }).ToArray();
        
        
        
        
        using var context = DbFactory.CreateDbContext();
        var result = context.Notes.AsEnumerable();
        // var r = context.Notes.Add(new Note { Title = "a", Body = "A" });
        // var a = context.SaveChanges();
        // context.RemoveRange(result.TakeLast(5));
        
        Note[] news = new[]
        {
            new Note() { Title = "First note", Body = "Lorem ipsum dolor sit amet one", Created = DateTime.UtcNow, },  
            new Note() { Title = "Second note", Body = "Lorem ipsum dolor sit amet two", Created = DateTime.UtcNow, },
            new Note() { Title = "Third note", Body = "Lorem ipsum dolor sit amet three", Created = DateTime.UtcNow, },
            new Note() { Title = "Fourth note", Body = "Lorem ipsum dolor sit amet four", Created = DateTime.UtcNow, },
            new Note() { Title = "Fifth note", Body = "Lorem ipsum dolor sit amet five", Created = DateTime.UtcNow, },
        };
        context.AddRange(news);
        
        context.SaveChanges();
    }

    private class WeatherForecast
    {
        public DateOnly Date { get; set; }
        public int TemperatureC { get; set; }
        public string? Summary { get; set; }
        public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);
    }

}