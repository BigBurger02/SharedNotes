@page "/"
@using Microsoft.EntityFrameworkCore
@using SharedNotes.Data
@using SharedNotes.Model
@attribute [StreamRendering]
@inject IDbContextFactory<NotesContext> DbFactory
@rendermode InteractiveServer

<PageTitle>Notes</PageTitle>

<div class="header-panel flex-space-between">
	@* <a class="header-panel-item bg-col-white mr-10"> *@
	@* 	New note *@
	@* </a> *@
	<button class="white-button" @onclick="() => EditNote(0)">New note</button>
	<div class="header-panel-item bg-col-white width-50">
		Search
	</div>
	<div class="header-panel-item ml-10">
		Total notes: @Notes.Count
	</div>
</div>

@if (EditingNoteId != -1)
{
	<EditForm Model="EditingNote" OnValidSubmit="SaveNote" FormName="EditNoteForm" class="edit-note-form">
		<DataAnnotationsValidator/>
		<ValidationSummary/>

		<div>
			<InputText @bind-Value="EditingNote.Title" class="input-text" />
		</div>
		<div>
			<InputTextArea @bind-Value="EditingNote.Body"  class="input-text height-200px" />
		</div>

		<div>
			<button class="white-button m-10" type="submit">Save</button>
		</div>
	</EditForm>
}

@if (EditingNoteId == -1)
{
	@if (Notes == null)
	{
		<p>
			<em>Loading...</em>
		</p>
	}
	else if (!Notes.Any())
	{
		<p>
			<em>No notes</em>
		</p>
	}
	else
	{
		<div class="notes-list">
			@foreach (var item in Notes)
			{
				<div class="note-in-list flex-space-between">
					<div class="note-in-list-item width-50">@item.Title</div>
					<div class="note-in-list-item">@item.LastEdit</div>
					<div class="note-in-list-item-buttons flex-space-between">
						<button class="white-button mr-10" @onclick="() => EditNote(item.Id)">View note</button>
						<button class="white-button" @onclick="() => EditNote(item.Id)">Edit note</button>
					</div>
				</div>
			}
		</div>
	}
}


@code {
	private int EditingNoteId = -1; // -1 - none; 0 - new note

	private List<Note> Notes = null;

	[SupplyParameterFromForm]
	private Note? EditingNote { get; set; }

	protected override async Task OnInitializedAsync()
	{
		Notes = await GetAllNotes();
	}

	private async Task<List<Note>> GetAllNotes()
	{
		using var context = await DbFactory.CreateDbContextAsync();
		return context.Notes
			.OrderByDescending(l => l.LastEdit)
			.ToList();
	}

	private void EditNote(int id)
	{
		if (id == 0)
		{
			EditingNoteId = 0;
			EditingNote = new Note()
			{
				Created = DateTime.UtcNow,
			};

			return;
		}
		
		EditingNoteId = id;
		EditingNote = Notes.Find(i => i.Id == id);	
	}

	private async Task SaveNote()
	{
		using var context = await DbFactory.CreateDbContextAsync();
		
		if (EditingNoteId == 0)
		{
			EditingNote.LastEdit = DateTime.UtcNow;
			await context.Notes.AddAsync(EditingNote);
			await context.SaveChangesAsync();
			
			Notes.Add(EditingNote);
		}
		else
		{
			EditingNote.LastEdit = DateTime.UtcNow;

			context.Notes.Update(EditingNote);
			await context.SaveChangesAsync();
		}
		
		EditingNoteId = -1;
		EditingNote = null;
	}

}