@page "/"
@using Microsoft.EntityFrameworkCore
@using SharedNotes.Data
@using SharedNotes.Model
@attribute [StreamRendering]
@inject IDbContextFactory<NotesContext> DbFactory
@rendermode InteractiveServer

<PageTitle>Notes</PageTitle>

<div class="header-panel flex-space-between">
	<a class="header-panel-item bg-col-white mr-10">
		New note
	</a>
	<div class="header-panel-item bg-col-white width-50">
		Search
	</div>
	<div class="header-panel-item ml-10">
		Total notes: 0
	</div>
</div>

@if (editingNote != 0)
{
	
}

@if (editingNote == 0)
{
	@if (notes == null)
	{
		<p>
			<em>Loading...</em>
		</p>
	}
	else if (!notes.Any())
	{
		<p>
			<em>No notes</em>
		</p>
	}
	else
	{
		<div class="notes-list">
			@foreach (var item in notes)
			{
				<div class="note-in-list flex-space-between">
					<div class="note-in-list-item width-50">@item.Title</div>
					<div class="note-in-list-item">@item.Created</div>
					<div class="note-in-list-item-buttons flex-space-between">
						<button class="white-button mr-10" @onclick="() => EditNote(item.Id)">View note</button>
						<button class="white-button" @onclick="() => EditNote(item.Id)">Edit note</button>
					</div>
				</div>
			}
		</div>
	}
}


@code {
	private int editingNote = 0;

	private List<Note> notes = null;

	protected override async Task OnInitializedAsync()
	{
		notes = await GetAllNotes();
	}

	private async Task<List<Note>> GetAllNotes()
	{
		using var context = await DbFactory.CreateDbContextAsync();
		return context.Notes.ToList();
	}

	private void EditNote(int id)
	{
		editingNote = id;
	}
	
	private void UpdateHeading()
	{
		editingNote = -1;
	}
}