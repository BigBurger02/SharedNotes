@page "/"
@using Microsoft.EntityFrameworkCore
@using SharedNotes.Data
@using SharedNotes.Interfaces
@using SharedNotes.Model
@attribute [StreamRendering]
@inject INotesRepository Repository
@rendermode InteractiveServer

<PageTitle>Notes</PageTitle>

<div class="header-panel flex-space-between">
	<button class="white-button" @onclick="() => EditNote(0)">New note</button>
	<div class="header-panel-item bg-col-white width-50">
		Search
	</div>
	<div class="header-panel-item ml-10">
		Total notes: @Notes.Count
	</div>
</div>

@if (EditingNoteId != -1)
{
	<EditForm Model="EditingNote" OnValidSubmit="SaveNote" FormName="EditNoteForm" class="edit-note-form">
		<DataAnnotationsValidator/>
		<ValidationSummary/>

		<div>
			<InputText @bind-Value="EditingNote.Title" class="input-text"/>
		</div>
		<div>
			<InputTextArea @bind-Value="EditingNote.Body" class="input-text height-200px"/>
		</div>

		<div>
			<button class="white-button m-10" type="submit">Save</button>
		</div>
	</EditForm>
}

@if (EditingNoteId == -1)
{
	@if (Notes == null)
	{
		<p>
			<em>Loading...</em>
		</p>
	}
	else if (!Notes.Any())
	{
		<p>
			<em>No notes</em>
		</p>
	}
	else
	{
		<div class="notes-list">
			@foreach (var item in Notes)
			{
				if (ViewNote == item.Id)
				{
					<div class="note-in-list">
						<div class="flex-space-between">
							<div class="note-in-list-item width-50">@item.Title</div>
							<div class="note-in-list-item">@item.LastEdit</div>
							<div class="note-in-list-item-buttons flex-space-between">
								<button class="white-button mr-10" @onclick="() => ViewNote = -1">Hide note</button>
								<button class="white-button" @onclick="() => EditNote(item.Id)">Edit note</button>
							</div>
						</div>
						<div class="note-in-list-view">
							@item.Body
						</div>
						<div></div>
					</div>
				}
				else
				{
					<div class="note-in-list">
						<div class="flex-space-between">
							<div class="note-in-list-item width-50">@item.Title</div>
							<div class="note-in-list-item">@item.LastEdit</div>
							<div class="note-in-list-item-buttons flex-space-between">
								<button class="white-button mr-10" @onclick="() => ViewNote = item.Id">View note</button>
								<button class="white-button" @onclick="() => EditNote(item.Id)">Edit note</button>
							</div>
						</div>
						<div></div>
					</div>
				}
			}
		</div>
	}
}


@code {
	private int EditingNoteId = -1; // -1 - none; 0 - new note
	private int ViewNote = -1;

	private List<Note> Notes = null;

	[SupplyParameterFromForm]
	private Note? EditingNote { get; set; }

	protected override async Task OnInitializedAsync()
	{
		Notes = Repository.GetAllNotesOrderByLastEditDesc()
			.ToList();
	}

	private void EditNote(int id)
	{
		if (id == 0)
		{
			EditingNoteId = 0;
			EditingNote = new Note()
			{
				Created = DateTime.UtcNow,
			};

			return;
		}

		EditingNoteId = id;
		EditingNote = Notes.Find(i => i.Id == id);
	}

	private async Task SaveNote()
	{
		if (EditingNoteId == 0)
		{
			EditingNote.LastEdit = DateTime.UtcNow;
			await Repository.AddNoteAsync(EditingNote);
			await Repository.Commit();

			Notes.Add(EditingNote);
		}
		else
		{
			EditingNote.LastEdit = DateTime.UtcNow;
			
			await Repository.Commit();
		}

		EditingNoteId = -1;
		EditingNote = null;
		
		Notes = Notes
			.OrderByDescending(l => l.LastEdit)
			.ToList();
	}

}