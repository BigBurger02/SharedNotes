@page "/"
@using SharedNotes.Interfaces
@using SharedNotes.Model
@attribute [StreamRendering]

@inject INotesRepository Repository
@inject IElasticsearchService Elasticsearch

@rendermode InteractiveServer

<PageTitle>Notes</PageTitle>

<div class="header-panel flex-space-between">
	<button class="white-button mr-10" @onclick="() => EditNote(0)">New note</button>
	<div class="header-panel-item bg-col-white width-50">
		<input
			@bind-value="SearchString"
			@bind-value:event="oninput"
			@onkeyup="Search"
			
			class="input-text"
			placeholder="Search"
		/>
	</div>
	<div class="header-panel-item ml-10">
		Total notes:
		@if (Notes != null)
		{
			<span>@Notes.Count</span>
		}
	</div>
</div>

<div class="content">
	@if (EditingNoteId != -1)
	{
		<EditForm Model="EditingNote" OnValidSubmit="SaveNote" FormName="EditNoteForm" class="edit-note-form">
			<DataAnnotationsValidator/>
			<ValidationSummary/>

			<div>
				<InputText @bind-Value="EditingNote.Title" class="input-text mb-10" placeholder="Title"/>
			</div>
			<div>
				<InputTextArea @bind-Value="EditingNote.Body" class="input-text height-200px" placeholder=""/>
			</div>

			<div>
				<button class="white-button" type="submit">Save</button>
			</div>
		</EditForm>
	}

	@if (EditingNoteId == -1)
	{
		@if (Notes == null)
		{
			<div class="short-info">Loading...</div>
		}
		else if (!Notes.Any())
		{
			<div class="short-info">No notes</div>
		}
		else
		{
			@if (SearchString == string.Empty)
			{
				ShowNotes = Notes;
			}
			else
			{
				ShowNotes = FoundNotes;
				if (FoundNotes.Count == 0)
				{
					<div class="short-info">Nothing found(</div>
				}
			}
			
			<div class="notes-list">
				@foreach (var item in ShowNotes)
				{
					<div class="note-in-list">
						<div class="flex-space-between">
							<div class="note-in-list-item width-50">@item.Title</div>
							<div class="note-in-list-item">@item.LastEdit</div>
							<div class="note-in-list-item-buttons flex-space-between">
								@if (ViewNote == item.Id)
								{
									<button class="white-button mr-10" @onclick="() => ViewNote = -1">Hide note</button>
								}
								else
								{
									<button class="white-button mr-10" @onclick="() => ViewNote = item.Id">View note</button>
								}
								<button class="white-button" @onclick="() => EditNote(item.Id)">Edit note</button>
							</div>
						</div>
						@if (ViewNote == item.Id)
						{
							<div class="note-in-list-view">
								@item.Body
							</div>
						}
					</div>
				}
			</div>
		}
	}
</div>

@code {
	private int EditingNoteId = -1; // -1 - none; 0 - new note
	private int ViewNote = -1; // -1 - none

	private List<Note> Notes = null!;

	[SupplyParameterFromForm]
	private Note? EditingNote { get; set; }

	private string NotesIndexName = "notes-index";
	private string SearchString = String.Empty;
	private List<Note> FoundNotes = null!;
	
	private List<Note> ShowNotes = null!;

	protected override async Task OnInitializedAsync()
	{
		Notes = Repository.GetAllNotesOrderByLastEditDesc()
			.ToList();

		FoundNotes = new List<Note>();
	}

	private void EditNote(int id)
	{
		if (id == 0) // new note
		{
			EditingNoteId = 0;
			EditingNote = new Note()
			{
				Created = DateTime.UtcNow,
				LastEdit = DateTime.UtcNow,
			};

			return;
		}

		EditingNoteId = id;
		EditingNote = Notes.Find(i => i.Id == id);
	}

	private async Task SaveNote()
	{
		if (EditingNoteId == 0) // new note
		{
			EditingNote.LastEdit = DateTime.UtcNow;
			await Repository.AddNoteAsync(EditingNote);
			await Repository.Commit();

			Notes.Add(EditingNote);
		}
		else
		{
			EditingNote.LastEdit = DateTime.UtcNow;

			await Repository.Commit();
		}

		await Elasticsearch.IndexDocAsync(EditingNote, NotesIndexName);

		EditingNoteId = -1;
		EditingNote = null;

		Notes = Notes
			.OrderByDescending(l => l.LastEdit)
			.ToList();
	}

	private async Task Search()
	{
		if (SearchString == String.Empty)
		{
			FoundNotes = new List<Note>();
		}
		
		var found = await Elasticsearch.GetNotesAsync(SearchString, NotesIndexName, 0, 10);
		FoundNotes = found.ToList();
	}
}