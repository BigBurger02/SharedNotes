@page "/"

@using SharedNotes.Interfaces
@using SharedNotes.Extensions

@attribute [StreamRendering]

@inject INotesRepository Repository
@inject IElasticsearchService Elasticsearch

@rendermode InteractiveServer

<PageTitle>Notes</PageTitle>

<div class="header-panel flex">
	<div class="width-25 flex justify--content-left">
		@if (NoteBeingEdited == null)
		{
			<button class="white-button" @onclick="() => EditNote(0)">New note</button>
		}
	</div>
	<div class="width-50">
		<input
			@bind-value="SearchString"
			@bind-value:event="oninput"
			@onkeyup="SearchAsync"

			class="header-panel-item input-search"
			placeholder="Search"/>
	</div>
	<div class="header-panel-item width-25 flex justify--content-right">
		Total notes:
		@if (Notes != null)
		{
			<span>@Notes.Count</span>
		}
	</div>
</div>



<div class="content">
	@if (NoteBeingEdited == null)
	{
		@if (Notes == null)
		{
			<div class="short-info">Loading...</div>
		}
		else if (!Notes.Any())
		{
			<div class="short-info">No notes</div>
		}
		else
		{
			@if (SearchString == string.Empty)
			{
				ShowNotes = Notes; // show all notes
			}
			else
			{
				ShowNotes = FoundNotes; // show notes found by ElasticSearch
				
				if (Searching)
				{
					<div class="short-info">Searching...</div>	
				}
				else if (FoundNotes.Count == 0)
				{
					<div class="short-info">Nothing found(</div>
				}
			}
			
			<div>
				@foreach (var item in ShowNotes)
				{
					<div class="note-in-list">
						<div class="flex-space-between">
							<div class="note-in-list-item width-50">@item.Title</div>
							<div class="note-in-list-item" title="Created: @item.Created.ToLocalTime(), Last edit: @item.LastEdit.ToLocalTime()">@item.LastEdit.ToTimeSinceString()</div>
							<div class="note-in-list-item-buttons flex-space-between">
								@if (NoteBeingViewed == item.Id)
								{
									<button class="white-button mr-10" @onclick="() => NoteBeingViewed = 0">Hide note</button>
								}
								else
								{
									<button class="white-button mr-10" @onclick="() => NoteBeingViewed = item.Id">View note</button>
								}
								<button class="white-button" @onclick="() => EditNote(item.Id)">Edit note</button>
							</div>
						</div>
						@if (NoteBeingViewed == item.Id)
						{
							<div class="note-in-list-view">
								<p>
									@item.Body
								</p>
							</div>
						}
					</div>
				}
			</div>
		}
	}
	
	
	
	@if (NoteBeingEdited != null)
	{
    	<EditForm Model="NoteBeingEdited" OnValidSubmit="SaveNoteAsync" FormName="EditNoteForm" class="edit-note-form">
    		<DataAnnotationsValidator/>

    		<div>
    			<InputText @bind-Value="NoteBeingEdited.Title" class="input-text mb-10" placeholder="Title"/>
    		</div>
    		<div class="height-20rem mb-10">
    			<InputTextArea @bind-Value="NoteBeingEdited.Body" class="input-text height-20rem" placeholder=""/>
    		</div>

    		<div class="flex">
    			<div>
    				<button class="white-button mr-10" type="submit">Save</button>
    			</div>
    			<div>
    				<button class="white-button" @onclick="() => CancelNote()">Cancel</button>
    			</div>
    			<div>
    				<ValidationSummary class="validation-errors"/>
    			</div>
    		</div>
    	</EditForm>
    }
</div>
